{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet CustomerComponent = class CustomerComponent {\n  /*  constructor(private http: HttpClient) { }*/\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.customers = []; // Define the customer array\n    this.base = \"\";\n    this.newCustomer = {\n      id: '',\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      balance: 0,\n      currency: ''\n    }; // Define a newCustomer object for adding\n    this.editingCustomer = {\n      id: '',\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      balance: 0,\n      currency: ''\n    }; // Define a editingCustomer object for editing\n    http.get(baseUrl + 'customer/customers').subscribe(data => {\n      this.customers = data;\n      console.log(data);\n      this.base = baseUrl;\n    }, error => console.error(error));\n  }\n  ngOnInit() {\n    // Fetch the list of customers when the component is initialized\n    this.getCustomers();\n  }\n  getCustomers() {\n    // Make an HTTP GET request to retrieve the list of customers\n    this.http.get(this.base + 'customer/customers').subscribe(data => {\n      this.customers = data;\n    });\n  }\n  addCustomer() {\n    // Make an HTTP POST request to add a new customer\n    this.http.post(this.base + 'customer/CreateCustomer', this.newCustomer).subscribe(() => {\n      // Refresh the list of customers after adding\n      this.getCustomers();\n      // Clear the new customer object\n      this.newCustomer = {\n        id: '',\n        firstname: '',\n        lastname: '',\n        email: '',\n        phone_Number: '',\n        country_code: '',\n        gender: '',\n        balance: 0,\n        currency: ''\n      };\n    });\n  }\n  // Method to set the currently edited customer\n  editCustomer(customerId) {\n    this.http.post(this.base + `Customer/UpdateCustomer/${customerId}`, this.editingCustomer).subscribe(() => {\n      this.getCustomers();\n      this.editingCustomer = {\n        id: '',\n        firstname: '',\n        lastname: '',\n        email: '',\n        phone_Number: '',\n        country_code: '',\n        gender: '',\n        balance: 0,\n        currency: ''\n      }; // Clear the editingCustomer\n    });\n  }\n\n  deleteCustomer(customerId) {\n    // Make an HTTP DELETE request to delete the customer\n    this.http.delete(this.base + `customer/DeleteCustomer/${customerId}`).subscribe(() => {\n      // Refresh the list of customers after deletion\n      this.getCustomers();\n    });\n  }\n};\nCustomerComponent = __decorate([Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n}), __param(1, Inject('BASE_URL'))], CustomerComponent);\nexport { CustomerComponent };","map":{"version":3,"mappings":";AAEA,SAASA,SAAS,EAAUC,MAAM,QAAQ,eAAe;AAOlD,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EA0B5B;EAEEC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IA3B1B,cAAS,GAAe,EAAE,CAAC,CAAC;IAC5B,SAAI,GAAW,EAAE;IACjB,gBAAW,GAAa;MACtBE,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;KACX,CAAC,CAAC;IACH,oBAAe,GAAa;MAC1BR,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;KACX,CAAC,CAAC;IAKCV,IAAI,CAACW,GAAG,CAAaV,OAAO,GAAG,oBAAoB,CAAC,CAACW,SAAS,CAAEC,IAAI,IAAI;MACxE,IAAI,CAACC,SAAS,GAAGD,IAAI;MACrBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,IAAI,CAACI,IAAI,GAAGhB,OAAO;IACrB,CAAC,EAAEiB,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEAC,QAAQ;IACN;IACA,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV;IACA,IAAI,CAACpB,IAAI,CAACW,GAAG,CAAa,IAAI,CAACM,IAAI,GAAG,oBAAoB,CAAC,CAACL,SAAS,CAAEC,IAAI,IAAI;MAC7E,IAAI,CAACC,SAAS,GAAGD,IAAI;IACvB,CAAC,CAAC;EACJ;EAEAQ,WAAW;IACT;IACA,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAC,IAAI,CAACL,IAAI,GAAG,yBAAyB,EAAE,IAAI,CAACM,WAAW,CAAC,CAACX,SAAS,CAAC,MAAK;MACrF;MACA,IAAI,CAACQ,YAAY,EAAE;MACnB;MACA,IAAI,CAACG,WAAW,GAAG;QACjBrB,EAAE,EAAE,EAAE;QACNC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,EAAE;QAChBC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE;OACX;IACH,CAAC,CAAC;EACJ;EAEA;EACAc,YAAY,CAACC,UAAkB;IAC7B,IAAI,CAACzB,IAAI,CAACsB,IAAI,CAAC,IAAI,CAACL,IAAI,GAAG,2BAA2BQ,UAAU,EAAE,EAAE,IAAI,CAACC,eAAe,CAAC,CAACd,SAAS,CAAC,MAAK;MACvG,IAAI,CAACQ,YAAY,EAAE;MACnB,IAAI,CAACM,eAAe,GAAG;QACrBxB,EAAE,EAAE,EAAE;QACNC,SAAS,EAAE,EAAE;QACbC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,EAAE;QACTC,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,EAAE;QAChBC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE;OACX,CAAC,CAAC;IACL,CAAC,CAAC;EACJ;;EAEAiB,cAAc,CAACF,UAAkB;IAC/B;IACA,IAAI,CAACzB,IAAI,CAAC4B,MAAM,CAAC,IAAI,CAACX,IAAI,GAAG,2BAA2BQ,UAAU,EAAE,CAAC,CAACb,SAAS,CAAC,MAAK;MACnF;MACA,IAAI,CAACQ,YAAY,EAAE;IACrB,CAAC,CAAC;EACJ;CACD;AA7FYtB,iBAAiB,eAL7BF,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,EA6ByCC,iBAAM,CAAC,UAAU,CAAC,IA5BhDlC,iBAAiB,CA6F7B;SA7FYA,iBAAiB","names":["Component","Inject","CustomerComponent","constructor","http","baseUrl","id","firstname","lastname","email","phone_Number","country_code","gender","balance","currency","get","subscribe","data","customers","console","log","base","error","ngOnInit","getCustomers","addCustomer","post","newCustomer","editCustomer","customerId","editingCustomer","deleteCustomer","delete","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer\\customer.component.ts"],"sourcesContent":["import { CurrencyPipe } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit, Inject } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.css']\r\n})\r\nexport class CustomerComponent implements OnInit {\r\n  customers: Customer[] = []; // Define the customer array\r\n  base: string = \"\";\r\n  newCustomer: Customer = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    phone_Number: '',\r\n    country_code: '',\r\n    gender: '',\r\n    balance: 0,\r\n    currency: ''\r\n  }; // Define a newCustomer object for adding\r\n  editingCustomer: Customer = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    phone_Number: '',\r\n    country_code: '',\r\n    gender: '',\r\n    balance: 0,\r\n    currency: ''\r\n  }; // Define a editingCustomer object for editing\r\n\r\n  /*  constructor(private http: HttpClient) { }*/\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n      http.get<Customer[]>(baseUrl + 'customer/customers').subscribe((data) => {\r\n      this.customers = data;\r\n      console.log(data);\r\n      this.base = baseUrl;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Fetch the list of customers when the component is initialized\r\n    this.getCustomers();\r\n  }\r\n\r\n  getCustomers(): void {\r\n    // Make an HTTP GET request to retrieve the list of customers\r\n    this.http.get<Customer[]>(this.base + 'customer/customers').subscribe((data) => {\r\n      this.customers = data;\r\n    });\r\n  }\r\n\r\n  addCustomer(): void {\r\n    // Make an HTTP POST request to add a new customer\r\n    this.http.post(this.base + 'customer/CreateCustomer', this.newCustomer).subscribe(() => {\r\n      // Refresh the list of customers after adding\r\n      this.getCustomers();\r\n      // Clear the new customer object\r\n      this.newCustomer = {\r\n        id: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        phone_Number: '',\r\n        country_code: '',\r\n        gender: '',\r\n        balance: 0,\r\n        currency: ''\r\n      };\r\n    });\r\n  }\r\n\r\n  // Method to set the currently edited customer\r\n  editCustomer(customerId: string): void {\r\n    this.http.post(this.base + `Customer/UpdateCustomer/${customerId}`, this.editingCustomer).subscribe(() => {\r\n      this.getCustomers();\r\n      this.editingCustomer = {\r\n        id: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        phone_Number: '',\r\n        country_code: '',\r\n        gender: '',\r\n        balance: 0,\r\n        currency: ''\r\n      }; // Clear the editingCustomer\r\n    });\r\n  }\r\n\r\n  deleteCustomer(customerId: string): void {\r\n    // Make an HTTP DELETE request to delete the customer\r\n    this.http.delete(this.base + `customer/DeleteCustomer/${customerId}`).subscribe(() => {\r\n      // Refresh the list of customers after deletion\r\n      this.getCustomers();\r\n    });\r\n  }\r\n}\r\n  interface Customer {\r\n  id: string;\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  phone_Number: string;\r\n  country_code: string;\r\n  gender: string;\r\n    balance: number;\r\n    currency: CurrencyPipe;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}