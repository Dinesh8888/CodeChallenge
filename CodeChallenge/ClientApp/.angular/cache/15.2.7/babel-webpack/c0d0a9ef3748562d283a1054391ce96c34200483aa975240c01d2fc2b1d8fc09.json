{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CustomerFormComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \"Id is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \"First Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \"Last Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CustomerFormComponent {\n  constructor(http, formBuilder, router, activatedRoute, baseUrl) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.isEditing = false; // Indicates whether we are editing an existing customer\n    this.customerId = null; // ID of the customer being edited\n    this.base = \"\";\n    this.base = baseUrl;\n  }\n  ngOnInit() {\n    this.customerForm = this.formBuilder.group({\n      id: ['', Validators.required],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: [''],\n      countryCode: [''],\n      gender: [''],\n      balance: [0, Validators.min(0)],\n      currency: ['']\n    });\n    // Check if we are in edit mode (URL contains an ID)\n    this.customerId = this.activatedRoute.snapshot.params['id'];\n    if (this.customerId) {\n      this.isEditing = true;\n      this.http.get(this.base + 'customer/GetCustomerById/' + this.customerId).subscribe(data => {\n        this.customerForm = this.formBuilder.group({\n          id: data.id,\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email,\n          phone_Number: data.phone_Number,\n          country_code: data.country_code,\n          gender: data.gender,\n          balance: data.balance,\n          currency: data.currency\n        });\n      });\n    }\n  }\n  saveCustomer() {\n    if (this.customerForm.valid) {\n      const formData = this.customerForm.value;\n      if (this.customerId) {\n        this.http.post(this.base + 'customer/updatecustomer/' + this.customerId, formData).subscribe(() => {\n          setTimeout(() => {\n            this.router.navigate(['']);\n          }, 2000);\n        });\n      } else {\n        this.http.post(this.base + 'customer/createcustomer', formData).subscribe(() => {\n          setTimeout(() => {\n            this.router.navigate(['']);\n          }, 2000);\n        });\n      }\n    } else {\n      this.markFormGroupTouched(this.customerForm);\n    }\n  }\n  // Helper method to mark all form controls as touched to trigger validation messages\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\nCustomerFormComponent.ɵfac = function CustomerFormComponent_Factory(t) {\n  return new (t || CustomerFormComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nCustomerFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerFormComponent,\n  selectors: [[\"app-customer-form\"]],\n  decls: 49,\n  vars: 8,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"id\"], [\"type\", \"text\", \"id\", \"id\", \"formControlName\", \"id\", 1, \"form-control\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"firstname\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\", 1, \"form-control\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"id\", \"lastname\", \"formControlName\", \"lastname\", 1, \"form-control\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"phoneNumber\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"formControlName\", \"phoneNumber\", 1, \"form-control\"], [\"for\", \"countryCode\"], [\"type\", \"text\", \"id\", \"countryCode\", \"formControlName\", \"countryCode\", 1, \"form-control\"], [\"for\", \"gender\"], [\"type\", \"text\", \"id\", \"gender\", \"formControlName\", \"gender\", 1, \"form-control\"], [\"for\", \"balance\"], [\"type\", \"number\", \"id\", \"balance\", \"formControlName\", \"balance\", 1, \"form-control\"], [\"for\", \"currency\"], [\"type\", \"text\", \"id\", \"currency\", \"formControlName\", \"currency\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"save-button\", 3, \"disabled\"], [1, \"bi\", \"bi-save\"], [1, \"error-message\"]],\n  template: function CustomerFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CustomerFormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.saveCustomer();\n      });\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \"Id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵtemplate(8, CustomerFormComponent_div_8_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 5);\n      i0.ɵɵtext(11, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵtemplate(13, CustomerFormComponent_div_13_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 1)(15, \"label\", 7);\n      i0.ɵɵtext(16, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 8);\n      i0.ɵɵtemplate(18, CustomerFormComponent_div_18_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 1)(20, \"label\", 9);\n      i0.ɵɵtext(21, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 10);\n      i0.ɵɵtemplate(23, CustomerFormComponent_div_23_Template, 2, 0, \"div\", 4);\n      i0.ɵɵtemplate(24, CustomerFormComponent_div_24_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\", 1)(26, \"label\", 11);\n      i0.ɵɵtext(27, \"Phone Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(28, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 1)(30, \"label\", 13);\n      i0.ɵɵtext(31, \"Country Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\", 1)(34, \"label\", 15);\n      i0.ɵɵtext(35, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(36, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"div\", 1)(38, \"label\", 17);\n      i0.ɵɵtext(39, \"Balance\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(40, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"div\", 1)(42, \"label\", 19);\n      i0.ɵɵtext(43, \"Currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(44, \"input\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"div\", 1)(46, \"button\", 21);\n      i0.ɵɵelement(47, \"i\", 22);\n      i0.ɵɵtext(48, \" Save \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.isEditing ? \"Edit Customer\" : \"Add Customer\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"id\").touched && ctx.customerForm.get(\"id\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"firstname\").touched && ctx.customerForm.get(\"firstname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"lastname\").touched && ctx.customerForm.get(\"lastname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"email\"));\n      i0.ɵɵadvance(22);\n      i0.ɵɵproperty(\"disabled\", ctx.customerForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n\\r\\n.save-button[_ngcontent-%COMP%] {\\r\\n  background-color: #007bff;\\r\\n  color: white;\\r\\n  padding: 10px 20px;\\r\\n  border: none;\\r\\n  cursor: pointer;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3VzdG9tZXItZm9ybS9jdXN0b21lci1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUEseUNBQXlDO0FBQ3pDO0VBQ0UseUJBQXlCO0VBQ3pCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGVBQWU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbnB1dFt0eXBlPVwidGV4dFwiXSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi8qIEV4YW1wbGUgc3R5bGVzIGZvciB0aGUgXCJTYXZlXCIgYnV0dG9uICovXHJcbi5zYXZlLWJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","CustomerFormComponent","constructor","http","formBuilder","router","activatedRoute","baseUrl","base","ngOnInit","customerForm","group","id","required","firstname","lastname","email","phoneNumber","countryCode","gender","balance","min","currency","customerId","snapshot","params","isEditing","get","subscribe","data","phone_Number","country_code","saveCustomer","valid","formData","value","post","setTimeout","navigate","markFormGroupTouched","formGroup","Object","values","controls","forEach","control","markAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.ts","C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.html"],"sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Customer } from '../customer/Customer';\r\n\r\n@Component({\r\n  selector: 'app-customer-form',\r\n  templateUrl: './customer-form.component.html',\r\n  styleUrls: ['./customer-form.component.css']\r\n})\r\n\r\nexport class CustomerFormComponent implements OnInit {\r\n  customerForm!: FormGroup; // The form group to manage form controls\r\n  isEditing: boolean = false; // Indicates whether we are editing an existing customer\r\n  customerId: string | null = null; // ID of the customer being edited\r\n  base: string = \"\";\r\n\r\n  constructor(private http: HttpClient,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    @Inject('BASE_URL') baseUrl: string\r\n  ) {\r\n    this.base = baseUrl;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.customerForm = this.formBuilder.group({\r\n      id: ['', Validators.required],\r\n      firstname: ['', Validators.required],\r\n      lastname: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      phoneNumber: [''],\r\n      countryCode: [''],\r\n      gender: [''],\r\n      balance: [0, Validators.min(0)], // Assuming balance cannot be negative\r\n      currency: ['']\r\n    });\r\n\r\n    // Check if we are in edit mode (URL contains an ID)\r\n    this.customerId = this.activatedRoute.snapshot.params['id'];\r\n    if (this.customerId) {\r\n      this.isEditing = true;\r\n      this.http.get<Customer>(this.base + 'customer/GetCustomerById/' + this.customerId).subscribe((data) => {\r\n        this.customerForm = this.formBuilder.group({\r\n          id: data.id,\r\n          firstname: data.firstname,\r\n          lastname: data.lastname,\r\n          email: data.email,\r\n          phone_Number: data.phone_Number,\r\n          country_code: data.country_code,\r\n          gender: data.gender,\r\n          balance: data.balance,\r\n          currency: data.currency\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  saveCustomer(): void {\r\n    if (this.customerForm.valid) {\r\n      const formData: Customer = this.customerForm.value;\r\n\r\n      if (this.customerId) {\r\n        this.http.post(this.base + 'customer/updatecustomer/' + this.customerId, formData).subscribe(() => {\r\n          setTimeout(() => { this.router.navigate(['']); }, 2000);\r\n        });\r\n      }\r\n      else {\r\n        this.http.post(this.base + 'customer/createcustomer', formData).subscribe(() => {\r\n          setTimeout(() => { this.router.navigate(['']); }, 2000);\r\n        });\r\n      }\r\n      \r\n    } else {\r\n      this.markFormGroupTouched(this.customerForm);\r\n    }\r\n  }\r\n\r\n  // Helper method to mark all form controls as touched to trigger validation messages\r\n  private markFormGroupTouched(formGroup: FormGroup): void {\r\n    Object.values(formGroup.controls).forEach(control => {\r\n      control.markAsTouched();\r\n\r\n      if (control instanceof FormGroup) {\r\n        this.markFormGroupTouched(control);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div>\r\n  <h2>{{ isEditing ? 'Edit Customer' : 'Add Customer' }}</h2>\r\n\r\n  <form [formGroup]=\"customerForm\" (ngSubmit)=\"saveCustomer()\">\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"id\">Id</label>\r\n      <input type=\"text\" id=\"id\" formControlName=\"id\"  class=\"form-control\">\r\n      <div *ngIf=\"customerForm.get('id')!.touched && customerForm.get('id')!.hasError('required')\" class=\"error-message\">Id is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"firstname\">First Name</label>\r\n      <input type=\"text\" id=\"firstname\" formControlName=\"firstname\" class=\"form-control\">\r\n      <div *ngIf=\"customerForm.get('firstname')!.touched && customerForm.get('firstname')!.hasError('required')\" class=\"error-message\">First Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"lastname\">Last Name</label>\r\n      <input type=\"text\" id=\"lastname\" formControlName=\"lastname\" class=\"form-control\">\r\n      <div *ngIf=\"customerForm.get('lastname')!.touched && customerForm.get('lastname')!.hasError('required')\" class=\"error-message\">Last Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email</label>\r\n      <input type=\"email\" id=\"email\" formControlName=\"email\" class=\"form-control\">\r\n      <div *ngIf=\"customerForm.get('email')!.touched && customerForm.get('email')!.hasError('required')\" class=\"error-message\">Email is required.</div>\r\n      <div *ngIf=\"customerForm.get('email')!.touched && customerForm.get('email')!.hasError('email')\" class=\"error-message\">Invalid email format.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"phoneNumber\">Phone Number</label>\r\n      <input type=\"text\" id=\"phoneNumber\" formControlName=\"phoneNumber\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"countryCode\">Country Code</label>\r\n      <input type=\"text\" id=\"countryCode\" formControlName=\"countryCode\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"gender\">Gender</label>\r\n      <input type=\"text\" id=\"gender\" formControlName=\"gender\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"balance\">Balance</label>\r\n      <input type=\"number\" id=\"balance\" formControlName=\"balance\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"currency\">Currency</label>\r\n      <input type=\"text\" id=\"currency\" formControlName=\"currency\" class=\"form-control\">\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <button type=\"submit\" [disabled]=\"customerForm.invalid\" class=\"btn btn-primary save-button\">\r\n        <i class=\"bi bi-save\"></i> Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}