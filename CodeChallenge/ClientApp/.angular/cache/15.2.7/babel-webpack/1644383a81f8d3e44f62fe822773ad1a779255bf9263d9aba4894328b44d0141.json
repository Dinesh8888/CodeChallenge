{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nexport class CustomerFormComponent {\n  constructor(formBuilder, router, activatedRoute) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n  }\n  ngOnInit() {\n    this.customerForm = this.formBuilder.group({\n      id: [''],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n      // Add other form controls...\n    });\n    // Check if we are in edit mode (URL contains an ID)\n    const customerId = this.activatedRoute.snapshot.params['id'];\n    if (customerId) {\n      // Fetch customer data by ID and pre-fill the form for editing\n      // Implement this logic using HttpClient\n    }\n  }\n  saveCustomer() {\n    // Implement logic to save the customer data\n    // Use this.customerForm.value to get the form data\n    // Redirect back to the customer list after saving\n    this.router.navigate(['/customers']);\n  }\n}\nCustomerFormComponent.ɵfac = function CustomerFormComponent_Factory(t) {\n  return new (t || CustomerFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nCustomerFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerFormComponent,\n  selectors: [[\"app-customer-form\"]],\n  decls: 2,\n  vars: 0,\n  template: function CustomerFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"customer-form works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,qBAAqB;EAGhCC,YACUC,WAAwB,EACxBC,MAAc,EACdC,cAA8B;IAF9B,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;EACpB;EAEJC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACzCC,EAAE,EAAE,CAAC,EAAE,CAAC;MACRC,SAAS,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,KAAK,CAAC;MACnD;KACD,CAAC;IAEF;IACA,MAAMC,UAAU,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5D,IAAIF,UAAU,EAAE;MACd;MACA;IAAA;EAEJ;EAEAG,YAAY;IACV;IACA;IACA;IACA,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;;AA/BWjB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAkB;EAAAC;EAAAC;EAAAC;IAAA;MCTlCC,yBAAG;MAAAA,oCAAoB;MAAAA,iBAAI","names":["Validators","CustomerFormComponent","constructor","formBuilder","router","activatedRoute","ngOnInit","customerForm","group","id","firstname","required","lastname","email","customerId","snapshot","params","saveCustomer","navigate","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.ts","C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\nexport class CustomerFormComponent implements OnInit {\n  customerForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.customerForm = this.formBuilder.group({\n      id: [''], // Add form controls for customer properties with appropriate validators\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      // Add other form controls...\n    });\n\n    // Check if we are in edit mode (URL contains an ID)\n    const customerId = this.activatedRoute.snapshot.params['id'];\n    if (customerId) {\n      // Fetch customer data by ID and pre-fill the form for editing\n      // Implement this logic using HttpClient\n    }\n  }\n\n  saveCustomer(): void {\n    // Implement logic to save the customer data\n    // Use this.customerForm.value to get the form data\n    // Redirect back to the customer list after saving\n    this.router.navigate(['/customers']);\n  }\n}\n","<p>customer-form works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}