{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CustomerComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"a\", 6);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵpipe(18, \"currency\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const customer_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.firstname);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.lastname);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"href\", \"mailto:\" + customer_r1.email, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(customer_r1.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.phone_Number);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.country_code);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(customer_r1.gender);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(18, 9, customer_r1.balance));\n  }\n}\nexport class CustomerComponent {\n  /*  constructor(private http: HttpClient) { }*/\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.customers = []; // Define the customer array\n    this.base = \"\";\n    this.newCustomer = {\n      id: '',\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      balance: 0\n    }; // Define a newCustomer object for adding\n    this.editingCustomer = {\n      id: '',\n      firstname: '',\n      lastname: '',\n      email: '',\n      phone_Number: '',\n      country_code: '',\n      gender: '',\n      balance: 0\n    }; // Define a editingCustomer object for editing\n    http.get(baseUrl + 'customer/customers').subscribe(data => {\n      this.customers = data;\n      console.log(data);\n      this.base = baseUrl;\n    }, error => console.error(error));\n  }\n  ngOnInit() {\n    // Fetch the list of customers when the component is initialized\n    this.getCustomers();\n  }\n  getCustomers() {\n    // Make an HTTP GET request to retrieve the list of customers\n    this.http.get(this.base + 'customer/customers').subscribe(data => {\n      this.customers = data;\n    });\n  }\n  addCustomer() {\n    // Make an HTTP POST request to add a new customer\n    this.http.post(this.base + 'customer/CreateCustomer', this.newCustomer).subscribe(() => {\n      // Refresh the list of customers after adding\n      this.getCustomers();\n      // Clear the new customer object\n      this.newCustomer = {\n        id: '',\n        firstname: '',\n        lastname: '',\n        email: '',\n        phone_Number: '',\n        country_code: '',\n        gender: '',\n        balance: 0\n      };\n    });\n  }\n  deleteCustomer(customerId) {\n    // Make an HTTP DELETE request to delete the customer\n    this.http.delete(this.base + `customer/DeleteCustomer/${customerId}`).subscribe(() => {\n      // Refresh the list of customers after deletion\n      this.getCustomers();\n    });\n  }\n}\nCustomerComponent.ɵfac = function CustomerComponent_Factory(t) {\n  return new (t || CustomerComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerComponent,\n  selectors: [[\"app-customer\"]],\n  decls: 34,\n  vars: 2,\n  consts: [[1, \"table\"], [4, \"ngFor\", \"ngForOf\"], [3, \"submit\"], [\"for\", \"newCustomerEmail\"], [\"type\", \"email\", \"id\", \"newCustomerEmail\", \"name\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [3, \"href\"]],\n  template: function CustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2, \"Customers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"table\", 0)(4, \"thead\")(5, \"tr\")(6, \"th\");\n      i0.ɵɵtext(7, \"CustomerId\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\");\n      i0.ɵɵtext(9, \"Firstname\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Lastname\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"th\");\n      i0.ɵɵtext(13, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"th\");\n      i0.ɵɵtext(15, \"Phone_Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"th\");\n      i0.ɵɵtext(17, \"Country_code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"th\");\n      i0.ɵɵtext(19, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"th\");\n      i0.ɵɵtext(21, \"Balance\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"tbody\");\n      i0.ɵɵtemplate(23, CustomerComponent_tr_23_Template, 19, 11, \"tr\", 1);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"h3\");\n      i0.ɵɵtext(25, \"Add New Customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function CustomerComponent_Template_form_submit_26_listener() {\n        return ctx.addCustomer();\n      });\n      i0.ɵɵelementStart(27, \"div\")(28, \"label\", 3);\n      i0.ɵɵtext(29, \"Email (Required):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function CustomerComponent_Template_input_ngModelChange_30_listener($event) {\n        return ctx.newCustomer.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(31, \"div\")(32, \"button\", 5);\n      i0.ɵɵtext(33, \"Add Customer\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(23);\n      i0.ɵɵproperty(\"ngForOf\", ctx.customers);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.newCustomer.email);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm, i2.CurrencyPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","CustomerComponent","constructor","http","baseUrl","id","firstname","lastname","email","phone_Number","country_code","gender","balance","get","subscribe","data","customers","console","log","base","error","ngOnInit","getCustomers","addCustomer","post","newCustomer","deleteCustomer","customerId","delete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer\\customer.component.html","C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer\\customer.component.ts"],"sourcesContent":["<div>\r\n  <h2>Customers</h2>\r\n\r\n  <!-- Add a table to display customer data -->\r\n  <table class=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th>CustomerId</th>\r\n        <th>Firstname</th>\r\n        <th>Lastname</th>\r\n        <th>Email</th>\r\n        <th>Phone_Number</th>\r\n        <th>Country_code</th>\r\n        <th>Gender</th>\r\n        <th>Balance</th>\r\n        <!--<th>Edit</th>\r\n        <th>Delete</th>-->\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <!-- Use *ngFor to iterate through the customers and display each row -->\r\n      <tr *ngFor=\"let customer of customers\">\r\n        <td>{{ customer.id }}</td>\r\n        <td>{{ customer.firstname }}</td>\r\n        <td>{{ customer.lastname }}</td>\r\n        <td><a [href]=\"'mailto:' + customer.email\">{{ customer.email }}</a></td>\r\n        <td>{{ customer.phone_Number }}</td>\r\n        <td>{{ customer.country_code }}</td>\r\n        <td>{{ customer.gender }}</td>\r\n        <td>{{ customer.balance | currency }}</td>\r\n        <!--<td><button (click)=\"editCustomer(customer.id)\">Edit</button></td>\r\n        <td><button (click)=\"deleteCustomer(customer.id)\">Delete</button></td>-->\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n  <!-- Add a form for adding a new customer -->\r\n  <h3>Add New Customer</h3>\r\n  <form (submit)=\"addCustomer()\">\r\n    <div>\r\n      <label for=\"newCustomerEmail\">Email (Required):</label>\r\n      <input type=\"email\" id=\"newCustomerEmail\" name=\"email\" [(ngModel)]=\"newCustomer.email\" required />\r\n    </div>\r\n    <!-- Add other input fields for the new customer data -->\r\n    <div>\r\n      <button type=\"submit\">Add Customer</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit, Inject } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html',\r\n  styleUrls: ['./customer.component.css']\r\n})\r\nexport class CustomerComponent implements OnInit {\r\n  customers: Customer[] = []; // Define the customer array\r\n  base: string = \"\";\r\n  newCustomer: Customer = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    phone_Number: '',\r\n    country_code: '',\r\n    gender: '',\r\n    balance: 0\r\n  }; // Define a newCustomer object for adding\r\n  editingCustomer: Customer = {\r\n    id: '',\r\n    firstname: '',\r\n    lastname: '',\r\n    email: '',\r\n    phone_Number: '',\r\n    country_code: '',\r\n    gender: '',\r\n    balance: 0\r\n  }; // Define a editingCustomer object for editing\r\n\r\n  /*  constructor(private http: HttpClient) { }*/\r\n\r\n    constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n      http.get<Customer[]>(baseUrl + 'customer/customers').subscribe((data) => {\r\n      this.customers = data;\r\n      console.log(data);\r\n      this.base = baseUrl;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Fetch the list of customers when the component is initialized\r\n    this.getCustomers();\r\n  }\r\n\r\n  getCustomers(): void {\r\n    // Make an HTTP GET request to retrieve the list of customers\r\n    this.http.get<Customer[]>(this.base + 'customer/customers').subscribe((data) => {\r\n      this.customers = data;\r\n    });\r\n  }\r\n\r\n  addCustomer(): void {\r\n    // Make an HTTP POST request to add a new customer\r\n    this.http.post(this.base + 'customer/CreateCustomer', this.newCustomer).subscribe(() => {\r\n      // Refresh the list of customers after adding\r\n      this.getCustomers();\r\n      // Clear the new customer object\r\n      this.newCustomer = {\r\n        id: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        email: '',\r\n        phone_Number: '',\r\n        country_code: '',\r\n        gender: '',\r\n        balance: 0\r\n      };\r\n    });\r\n  }\r\n\r\n  deleteCustomer(customerId: string): void {\r\n    // Make an HTTP DELETE request to delete the customer\r\n    this.http.delete(this.base + `customer/DeleteCustomer/${customerId}`).subscribe(() => {\r\n      // Refresh the list of customers after deletion\r\n      this.getCustomers();\r\n    });\r\n  }\r\n}\r\n  interface Customer {\r\n  id: string;\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  phone_Number: string;\r\n  country_code: string;\r\n  gender: string;\r\n  balance: number;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}