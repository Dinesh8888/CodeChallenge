{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction CustomerFormComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"First Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"Last Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CustomerFormComponent {\n  constructor(formBuilder, router, activatedRoute) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.isEditing = false; // Indicates whether we are editing an existing customer\n    this.customerId = null; // ID of the customer being edited\n  }\n\n  ngOnInit() {\n    this.customerForm = this.formBuilder.group({\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone_Number: [''],\n      country_code: [''],\n      gender: [''],\n      balance: [0, Validators.min(0)],\n      currency: ['']\n    });\n    // Check if we are in edit mode (URL contains an ID)\n    this.customerId = this.activatedRoute.snapshot.params['id'];\n    if (this.customerId) {\n      this.isEditing = true;\n      // Fetch customer data by ID and pre-fill the form for editing\n      // You should implement this logic using HttpClient\n      // Example: this.fetchCustomerData(this.customerId);\n    }\n  }\n  // Implement a method to fetch customer data by ID (using HttpClient) if in edit mode\n  saveCustomer() {\n    if (this.customerForm.valid) {\n      const formData = this.customerForm.value;\n      // Implement logic to save the customer data (create or update)\n      // Use formData to get the form data\n      // After saving, navigate back to the customer list or another page\n      this.router.navigate(['/customers']);\n    } else {\n      // Form is invalid, display validation errors\n      // You can mark controls as touched to trigger validation messages\n      this.markFormGroupTouched(this.customerForm);\n    }\n  }\n  // Helper method to mark all form controls as touched to trigger validation messages\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\nCustomerFormComponent.ɵfac = function CustomerFormComponent_Factory(t) {\n  return new (t || CustomerFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nCustomerFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerFormComponent,\n  selectors: [[\"app-customer-form\"]],\n  decls: 23,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"firstname\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"id\", \"lastname\", \"formControlName\", \"lastname\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"error-message\"]],\n  template: function CustomerFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CustomerFormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.saveCustomer();\n      });\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵtemplate(8, CustomerFormComponent_div_8_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 5);\n      i0.ɵɵtext(11, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 6);\n      i0.ɵɵtemplate(13, CustomerFormComponent_div_13_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 1)(15, \"label\", 7);\n      i0.ɵɵtext(16, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 8);\n      i0.ɵɵtemplate(18, CustomerFormComponent_div_18_Template, 2, 0, \"div\", 4);\n      i0.ɵɵtemplate(19, CustomerFormComponent_div_19_Template, 2, 0, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 1)(21, \"button\", 9);\n      i0.ɵɵtext(22, \"Save\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.isEditing ? \"Edit Customer\" : \"Add Customer\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"firstname\").touched && ctx.customerForm.get(\"firstname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"lastname\").touched && ctx.customerForm.get(\"lastname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"email\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.customerForm.invalid);\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","i0","CustomerFormComponent","constructor","formBuilder","router","activatedRoute","ngOnInit","customerForm","group","firstname","required","lastname","email","phone_Number","country_code","gender","balance","min","currency","customerId","snapshot","params","isEditing","saveCustomer","valid","formData","value","navigate","markFormGroupTouched","formGroup","Object","values","controls","forEach","control","markAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.ts","C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\n\nexport class CustomerFormComponent implements OnInit {\n  customerForm!: FormGroup; // The form group to manage form controls\n  isEditing: boolean = false; // Indicates whether we are editing an existing customer\n  customerId: string | null = null; // ID of the customer being edited\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.customerForm = this.formBuilder.group({\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone_Number: [''],\n      country_code: [''],\n      gender: [''],\n      balance: [0, Validators.min(0)], // Assuming balance cannot be negative\n      currency: ['']\n    });\n\n    // Check if we are in edit mode (URL contains an ID)\n    this.customerId = this.activatedRoute.snapshot.params['id'];\n    if (this.customerId) {\n      this.isEditing = true;\n      // Fetch customer data by ID and pre-fill the form for editing\n      // You should implement this logic using HttpClient\n      // Example: this.fetchCustomerData(this.customerId);\n    }\n  }\n\n  // Implement a method to fetch customer data by ID (using HttpClient) if in edit mode\n\n  saveCustomer(): void {\n    if (this.customerForm.valid) {\n      const formData = this.customerForm.value;\n      // Implement logic to save the customer data (create or update)\n      // Use formData to get the form data\n\n      // After saving, navigate back to the customer list or another page\n      this.router.navigate(['/customers']);\n    } else {\n      // Form is invalid, display validation errors\n      // You can mark controls as touched to trigger validation messages\n      this.markFormGroupTouched(this.customerForm);\n    }\n  }\n\n  // Helper method to mark all form controls as touched to trigger validation messages\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\n//export class CustomerFormComponent implements OnInit {\n//  customerForm: FormGroup;\n\n//  constructor(\n//    private formBuilder: FormBuilder,\n//    private router: Router,\n//    private activatedRoute: ActivatedRoute\n//  ) { }\n\n//  ngOnInit(): void {\n//    this.customerForm = this.formBuilder.group({\n//      id: [''], // Add form controls for customer properties with appropriate validators\n//      firstname: ['', Validators.required],\n//      lastname: ['', Validators.required],\n//      email: ['', [Validators.required, Validators.email]],\n//      // Add other form controls...\n//    });\n\n//    // Check if we are in edit mode (URL contains an ID)\n//    const customerId = this.activatedRoute.snapshot.params['id'];\n//    if (customerId) {\n//      // Fetch customer data by ID and pre-fill the form for editing\n//      // Implement this logic using HttpClient\n//    }\n//  }\n\n//  saveCustomer(): void {\n//    // Implement logic to save the customer data\n//    // Use this.customerForm.value to get the form data\n//    // Redirect back to the customer list after saving\n//    this.router.navigate(['/customers']);\n//  }\n//}\n","<div>\r\n  <h2>{{ isEditing ? 'Edit Customer' : 'Add Customer' }}</h2>\r\n\r\n  <form [formGroup]=\"customerForm\" (ngSubmit)=\"saveCustomer()\">\r\n    <div class=\"form-group\">\r\n      <label for=\"firstname\">First Name</label>\r\n      <input type=\"text\" id=\"firstname\" formControlName=\"firstname\">\r\n      <div *ngIf=\"customerForm.get('firstname').touched && customerForm.get('firstname').hasError('required')\" class=\"error-message\">First Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"lastname\">Last Name</label>\r\n      <input type=\"text\" id=\"lastname\" formControlName=\"lastname\">\r\n      <div *ngIf=\"customerForm.get('lastname').touched && customerForm.get('lastname').hasError('required')\" class=\"error-message\">Last Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email</label>\r\n      <input type=\"email\" id=\"email\" formControlName=\"email\">\r\n      <div *ngIf=\"customerForm.get('email').touched && customerForm.get('email').hasError('required')\" class=\"error-message\">Email is required.</div>\r\n      <div *ngIf=\"customerForm.get('email').touched && customerForm.get('email').hasError('email')\" class=\"error-message\">Invalid email format.</div>\r\n    </div>\r\n\r\n    <!-- Repeat similar form controls and validation messages for other fields -->\r\n\r\n    <div class=\"form-group\">\r\n      <button type=\"submit\" [disabled]=\"customerForm.invalid\">Save</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}