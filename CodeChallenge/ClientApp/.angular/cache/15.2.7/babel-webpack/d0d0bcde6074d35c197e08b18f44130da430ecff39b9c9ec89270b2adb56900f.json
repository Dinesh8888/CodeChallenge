{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CustomerFormComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1, \"First Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1, \"Last Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CustomerFormComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CustomerFormComponent {\n  constructor(http, formBuilder, router, activatedRoute, baseUrl) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.isEditing = false; // Indicates whether we are editing an existing customer\n    this.customerId = null; // ID of the customer being edited\n    this.base = \"\";\n    this.base = baseUrl;\n  }\n  ngOnInit() {\n    this.customerForm = this.formBuilder.group({\n      id: [0, Validators.min(0)],\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone_Number: [''],\n      country_code: [''],\n      gender: [''],\n      balance: [0, Validators.min(0)],\n      currency: ['']\n    });\n    // Check if we are in edit mode (URL contains an ID)\n    this.customerId = this.activatedRoute.snapshot.params['id'];\n    if (this.customerId) {\n      this.isEditing = true;\n      this.http.get(this.base + 'customer/' + this.customerId).subscribe(data => {\n        this.customerForm = this.formBuilder.group({\n          id: data.id,\n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email,\n          phone_Number: data.phone_Number,\n          country_code: data.country_code,\n          gender: data.gender,\n          balance: data.balance,\n          currency: data.currency\n        });\n      });\n      // Fetch customer data by ID and pre-fill the form for editing\n      // You should implement this logic using HttpClient\n      // Example: this.fetchCustomerData(this.customerId);\n    }\n  }\n  // Implement a method to fetch customer data by ID (using HttpClient) if in edit mode\n  saveCustomer() {\n    if (this.customerForm.valid) {\n      const formData = this.customerForm.value;\n      this.http.post(this.base + 'customer/createcustomer', formData).subscribe(() => {\n        //// Clear the new customer object\n        //this.customerForm = {\n        //  id: '',\n        //  firstname: '',\n        //  lastname: '',\n        //  email: '',\n        //  phone_Number: '',\n        //  country_code: '',\n        //  gender: '',\n        //  balance: 0,\n        //  currency: ''\n        //};\n        this.router.navigate(['/customers']);\n      });\n      // Implement logic to save the customer data (create or update)\n      // Use formData to get the form data\n      // After saving, navigate back to the customer list or another page\n      this.router.navigate(['/customers']);\n    } else {\n      // Form is invalid, display validation errors\n      // You can mark controls as touched to trigger validation messages\n      this.markFormGroupTouched(this.customerForm);\n    }\n  }\n  // Helper method to mark all form controls as touched to trigger validation messages\n  markFormGroupTouched(formGroup) {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\nCustomerFormComponent.ɵfac = function CustomerFormComponent_Factory(t) {\n  return new (t || CustomerFormComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nCustomerFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerFormComponent,\n  selectors: [[\"app-customer-form\"]],\n  decls: 47,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"id\"], [\"type\", \"number\", \"id\", \"id\", \"formControlName\", \"id\"], [\"for\", \"firstname\"], [\"type\", \"text\", \"id\", \"firstname\", \"formControlName\", \"firstname\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"id\", \"lastname\", \"formControlName\", \"lastname\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\"], [\"for\", \"phone_Number\"], [\"type\", \"text\", \"id\", \"phone_Number\", \"formControlName\", \"phone_Number\"], [\"for\", \"country_code\"], [\"type\", \"text\", \"id\", \"country_code\", \"formControlName\", \"country_code\"], [\"for\", \"gender\"], [\"type\", \"text\", \"id\", \"gender\", \"formControlName\", \"gender\"], [\"for\", \"balance\"], [\"type\", \"number\", \"id\", \"balance\", \"formControlName\", \"balance\"], [\"for\", \"currency\"], [\"type\", \"text\", \"id\", \"currency\", \"formControlName\", \"currency\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"error-message\"]],\n  template: function CustomerFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CustomerFormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.saveCustomer();\n      });\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"label\", 2);\n      i0.ɵɵtext(6, \"Id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 4);\n      i0.ɵɵtext(10, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵtemplate(12, CustomerFormComponent_div_12_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"label\", 7);\n      i0.ɵɵtext(15, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 8);\n      i0.ɵɵtemplate(17, CustomerFormComponent_div_17_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 1)(19, \"label\", 9);\n      i0.ɵɵtext(20, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 10);\n      i0.ɵɵtemplate(22, CustomerFormComponent_div_22_Template, 2, 0, \"div\", 6);\n      i0.ɵɵtemplate(23, CustomerFormComponent_div_23_Template, 2, 0, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 1)(25, \"label\", 11);\n      i0.ɵɵtext(26, \"Phone Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(27, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 1)(29, \"label\", 13);\n      i0.ɵɵtext(30, \"Country Code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"div\", 1)(33, \"label\", 15);\n      i0.ɵɵtext(34, \"Gender\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"div\", 1)(37, \"label\", 17);\n      i0.ɵɵtext(38, \"Balance\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(39, \"input\", 18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"div\", 1)(41, \"label\", 19);\n      i0.ɵɵtext(42, \"Currency\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(43, \"input\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"div\", 1)(45, \"button\", 21);\n      i0.ɵɵtext(46, \"Save\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.isEditing ? \"Edit Customer\" : \"Add Customer\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.customerForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"firstname\").touched && ctx.customerForm.get(\"firstname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"lastname\").touched && ctx.customerForm.get(\"lastname\").hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.customerForm.get(\"email\").touched && ctx.customerForm.get(\"email\").hasError(\"email\"));\n      i0.ɵɵadvance(22);\n      i0.ɵɵproperty(\"disabled\", ctx.customerForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;ICa7DC,+BAAiI;IAAAA,uCAAuB;IAAAA,iBAAM;;;;;IAM9JA,+BAA+H;IAAAA,sCAAsB;IAAAA,iBAAM;;;;;IAM3JA,+BAAyH;IAAAA,kCAAkB;IAAAA,iBAAM;;;;;IACjJA,+BAAsH;IAAAA,qCAAqB;IAAAA,iBAAM;;;ADfvJ,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,IAAgB,EAC1BC,WAAwB,EACxBC,MAAc,EACdC,cAA8B,EAClBC,OAAe;IAJjB,SAAI,GAAJJ,IAAI;IACd,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IAPxB,cAAS,GAAY,KAAK,CAAC,CAAC;IAC5B,eAAU,GAAkB,IAAI,CAAC,CAAC;IAClC,SAAI,GAAW,EAAE;IAQf,IAAI,CAACE,IAAI,GAAGD,OAAO;EACrB;EAEAE,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACzCC,EAAE,EAAE,CAAC,CAAC,EAAEb,UAAU,CAACc,GAAG,CAAC,CAAC,CAAC,CAAC;MAC1BC,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACkB,KAAK,CAAC,CAAC;MACpDC,YAAY,EAAE,CAAC,EAAE,CAAC;MAClBC,YAAY,EAAE,CAAC,EAAE,CAAC;MAClBC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,OAAO,EAAE,CAAC,CAAC,EAAEtB,UAAU,CAACc,GAAG,CAAC,CAAC,CAAC,CAAC;MAC/BS,QAAQ,EAAE,CAAC,EAAE;KACd,CAAC;IAEF;IACA,IAAI,CAACC,UAAU,GAAG,IAAI,CAACjB,cAAc,CAACkB,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAC3D,IAAI,IAAI,CAACF,UAAU,EAAE;MACnB,IAAI,CAACG,SAAS,GAAG,IAAI;MACrB,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAAW,IAAI,CAACnB,IAAI,GAAG,WAAW,GAAG,IAAI,CAACe,UAAU,CAAC,CAACK,SAAS,CAAEC,IAAI,IAAI;QACpF,IAAI,CAACnB,YAAY,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;UACzCC,EAAE,EAAEiB,IAAI,CAACjB,EAAE;UACXE,SAAS,EAAEe,IAAI,CAACf,SAAS;UACzBE,QAAQ,EAAEa,IAAI,CAACb,QAAQ;UACvBC,KAAK,EAAEY,IAAI,CAACZ,KAAK;UACjBC,YAAY,EAAEW,IAAI,CAACX,YAAY;UAC/BC,YAAY,EAAEU,IAAI,CAACV,YAAY;UAC/BC,MAAM,EAAES,IAAI,CAACT,MAAM;UACnBC,OAAO,EAAEQ,IAAI,CAACR,OAAO;UACrBC,QAAQ,EAAEO,IAAI,CAACP;SAChB,CAAC;MACJ,CAAC,CAAC;MACF;MACA;MACA;;EAEJ;EAKA;EAEAQ,YAAY;IACV,IAAI,IAAI,CAACpB,YAAY,CAACqB,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAACtB,YAAY,CAACuB,KAAK;MAExC,IAAI,CAAC9B,IAAI,CAAC+B,IAAI,CAAC,IAAI,CAAC1B,IAAI,GAAG,yBAAyB,EAAEwB,QAAQ,CAAC,CAACJ,SAAS,CAAC,MAAK;QAE7E;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAI,CAACvB,MAAM,CAAC8B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC,CAAC,CAAC;MACF;MACA;MAEA;MACA,IAAI,CAAC9B,MAAM,CAAC8B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;KACrC,MAAM;MACL;MACA;MACA,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAAC1B,YAAY,CAAC;;EAEhD;EAEA;EACQ0B,oBAAoB,CAACC,SAAoB;IAC/CC,MAAM,CAACC,MAAM,CAACF,SAAS,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACC,OAAO,IAAG;MAClDA,OAAO,CAACC,aAAa,EAAE;MAEvB,IAAID,OAAO,YAAY5C,SAAS,EAAE;QAChC,IAAI,CAACsC,oBAAoB,CAACM,OAAO,CAAC;;IAEtC,CAAC,CAAC;EACJ;;AAjGWzC,qBAAqB;mBAArBA,qBAAqB,4KAUtB,UAAU;AAAA;AAVTA,qBAAqB;QAArBA,qBAAqB;EAAA2C;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZlChD,2BAAK;MACCA,YAAkD;MAAAA,iBAAK;MAE3DA,+BAA6D;MAA5BA;QAAA,OAAYiD,kBAAc;MAAA,EAAC;MAE1DjD,8BAAwB;MACNA,kBAAE;MAAAA,iBAAQ;MAC1BA,2BAAkD;MAEpDA,iBAAM;MAENA,8BAAwB;MACCA,2BAAU;MAAAA,iBAAQ;MACzCA,4BAA8D;MAC9DA,wEAA8J;MAChKA,iBAAM;MAENA,+BAAwB;MACAA,0BAAS;MAAAA,iBAAQ;MACvCA,4BAA4D;MAC5DA,wEAA2J;MAC7JA,iBAAM;MAENA,+BAAwB;MACHA,sBAAK;MAAAA,iBAAQ;MAChCA,6BAAuD;MACvDA,wEAAiJ;MACjJA,wEAAiJ;MACnJA,iBAAM;MAENA,+BAAwB;MACIA,6BAAY;MAAAA,iBAAQ;MAC9CA,6BAAoE;MAEtEA,iBAAM;MAENA,+BAAwB;MACIA,6BAAY;MAAAA,iBAAQ;MAC9CA,6BAAoE;MAEtEA,iBAAM;MAENA,+BAAwB;MACFA,uBAAM;MAAAA,iBAAQ;MAClCA,6BAAwD;MAE1DA,iBAAM;MAENA,+BAAwB;MACDA,wBAAO;MAAAA,iBAAQ;MACpCA,6BAA4D;MAE9DA,iBAAM;MAENA,+BAAwB;MACAA,yBAAQ;MAAAA,iBAAQ;MACtCA,6BAA4D;MAE9DA,iBAAM;MAENA,+BAAwB;MACkCA,qBAAI;MAAAA,iBAAS;;;MA5DrEA,eAAkD;MAAlDA,sEAAkD;MAEhDA,eAA0B;MAA1BA,4CAA0B;MAWtBA,eAAmG;MAAnGA,0HAAmG;MAMnGA,eAAiG;MAAjGA,wHAAiG;MAMjGA,eAA2F;MAA3FA,kHAA2F;MAC3FA,eAAwF;MAAxFA,+GAAwF;MAkCxEA,gBAAiC;MAAjCA,mDAAiC","names":["FormGroup","Validators","i0","CustomerFormComponent","constructor","http","formBuilder","router","activatedRoute","baseUrl","base","ngOnInit","customerForm","group","id","min","firstname","required","lastname","email","phone_Number","country_code","gender","balance","currency","customerId","snapshot","params","isEditing","get","subscribe","data","saveCustomer","valid","formData","value","post","navigate","markFormGroupTouched","formGroup","Object","values","controls","forEach","control","markAsTouched","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.ts","C:\\Users\\deshm\\source\\repos\\CodeChallenge\\CodeChallenge\\ClientApp\\src\\app\\customer-form\\customer-form.component.html"],"sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Customer } from '../customer/Customer';\r\n\n@Component({\n  selector: 'app-customer-form',\n  templateUrl: './customer-form.component.html',\n  styleUrls: ['./customer-form.component.css']\n})\n\nexport class CustomerFormComponent implements OnInit {\n  customerForm!: FormGroup; // The form group to manage form controls\n  isEditing: boolean = false; // Indicates whether we are editing an existing customer\n  customerId: string | null = null; // ID of the customer being edited\n  base: string = \"\";\n\n  constructor(private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    @Inject('BASE_URL') baseUrl: string\n  ) {\n    this.base = baseUrl;\n  }\n\n  ngOnInit(): void {\n    this.customerForm = this.formBuilder.group({\n      id: [0, Validators.min(0)], // Assuming balance cannot be negative\n      firstname: ['', Validators.required],\n      lastname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phone_Number: [''],\n      country_code: [''],\n      gender: [''],\n      balance: [0, Validators.min(0)], // Assuming balance cannot be negative\n      currency: ['']\n    });\n\n    // Check if we are in edit mode (URL contains an ID)\n    this.customerId = this.activatedRoute.snapshot.params['id'];\n    if (this.customerId) {\n      this.isEditing = true;\n      this.http.get<Customer>(this.base + 'customer/' + this.customerId).subscribe((data) => {\n        this.customerForm = this.formBuilder.group({\n          id: data.id, \n          firstname: data.firstname,\n          lastname: data.lastname,\n          email: data.email,\n          phone_Number: data.phone_Number,\n          country_code: data.country_code,\n          gender: data.gender,\n          balance: data.balance, \n          currency: data.currency\n        });\n      });\n      // Fetch customer data by ID and pre-fill the form for editing\n      // You should implement this logic using HttpClient\n      // Example: this.fetchCustomerData(this.customerId);\n    }\n  }\n\n      \n\n\n  // Implement a method to fetch customer data by ID (using HttpClient) if in edit mode\n\n  saveCustomer(): void {\n    if (this.customerForm.valid) {\n      const formData = this.customerForm.value;\n\n      this.http.post(this.base + 'customer/createcustomer', formData).subscribe(() => {\n        \n        //// Clear the new customer object\n        //this.customerForm = {\n        //  id: '',\n        //  firstname: '',\n        //  lastname: '',\n        //  email: '',\n        //  phone_Number: '',\n        //  country_code: '',\n        //  gender: '',\n        //  balance: 0,\n        //  currency: ''\n        //};\n        this.router.navigate(['/customers']);\n      });\n      // Implement logic to save the customer data (create or update)\n      // Use formData to get the form data\n\n      // After saving, navigate back to the customer list or another page\n      this.router.navigate(['/customers']);\n    } else {\n      // Form is invalid, display validation errors\n      // You can mark controls as touched to trigger validation messages\n      this.markFormGroupTouched(this.customerForm);\n    }\n  }\n\n  // Helper method to mark all form controls as touched to trigger validation messages\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\n","<div>\r\n  <h2>{{ isEditing ? 'Edit Customer' : 'Add Customer' }}</h2>\r\n\r\n  <form [formGroup]=\"customerForm\" (ngSubmit)=\"saveCustomer()\">\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"id\">Id</label>\r\n      <input type=\"number\" id=\"id\" formControlName=\"id\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"firstname\">First Name</label>\r\n      <input type=\"text\" id=\"firstname\" formControlName=\"firstname\">\r\n      <div *ngIf=\"customerForm.get('firstname')!.touched && customerForm.get('firstname')!.hasError('required')\" class=\"error-message\">First Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"lastname\">Last Name</label>\r\n      <input type=\"text\" id=\"lastname\" formControlName=\"lastname\">\r\n      <div *ngIf=\"customerForm.get('lastname')!.touched && customerForm.get('lastname')!.hasError('required')\" class=\"error-message\">Last Name is required.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email</label>\r\n      <input type=\"email\" id=\"email\" formControlName=\"email\">\r\n      <div *ngIf=\"customerForm.get('email')!.touched && customerForm.get('email')!.hasError('required')\" class=\"error-message\">Email is required.</div>\r\n      <div *ngIf=\"customerForm.get('email')!.touched && customerForm.get('email')!.hasError('email')\" class=\"error-message\">Invalid email format.</div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"phone_Number\">Phone Number</label>\r\n      <input type=\"text\" id=\"phone_Number\" formControlName=\"phone_Number\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"country_code\">Country Code</label>\r\n      <input type=\"text\" id=\"country_code\" formControlName=\"country_code\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"gender\">Gender</label>\r\n      <input type=\"text\" id=\"gender\" formControlName=\"gender\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"balance\">Balance</label>\r\n      <input type=\"number\" id=\"balance\" formControlName=\"balance\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"currency\">Currency</label>\r\n      <input type=\"text\" id=\"currency\" formControlName=\"currency\">\r\n      <!-- Add validation messages if needed -->\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <button type=\"submit\" [disabled]=\"customerForm.invalid\">Save</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}